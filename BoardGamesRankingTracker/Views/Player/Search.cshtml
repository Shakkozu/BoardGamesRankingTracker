@using PagedList.Mvc;
@model PagedList.IPagedList<BoardGamesRankingTracker.Models.PlayerViewModel>
@{
    ViewBag.Title = "Szukaj";
}
<h2>Search Players.</h2>

<p class="text-success">@ViewBag.StatusMessage</p>
@Html.AntiForgeryToken()
@using (Html.BeginForm())
{
<div class="container form">
    @Html.TextBox("SearchString", "", new { @class = "form-control", @placeholder = "Enter Player Nickname" })
    <div class="form-group">
        <label for="gameType">Gametype</label>
        <select class="form-control" name="currentFilter" id="gameType" aria-describedby="gameHelp" placeholder="Enter Player Nickname">
            @if (Model.FirstOrDefault() != null)
            {
                foreach (var type in Model.First().RankingPoints)
                {
                    if (Model.First().SelectedGame == type.Key.ToString())
                    {
                        <option selected>@type.Key.ToString()</option>
                    }
                    else
                    {
                        <option>@type.Key.ToString()</option>
                    }

                }
            }
        </select>
    </div>
    <div class="form-group">
        <input type="submit" value="Search" />
    </div>

</div>
}
    <div class="container players-table">
        <h3>
            Found Players
        </h3>
        <table class="table table-hover table-dark">
            <thead class="thead-light">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Nickname</th>
                    <th scope="col">Rating</th>
                    <th scope="col">W/L/T</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < Model.Count; i++)
                {



                    <tr>
                        @**To display id of found players correctly *@
                        @if (@Model.PageNumber > 1)
                        {
                            <th scope="row">@(i + 1 + ((Model.PageNumber - 1) * 10))</th>
                        }
                        else
                        {
                            <th scope="row">@(i + 1)</th>
                        }


                        <td>
                            <a href="@Url.Action("Details", "Player", new { id = Model[i].Id, currentFilter = Model[i].SelectedGame})">
                                @Html.DisplayFor(x => Model[i].Nickname)
                            </a>
                        </td>
                        <td>@Html.DisplayFor(x => Model[i].RankingPoints[Model[i].SelectedGame]) </td>
                        <td>
                            @Html.DisplayFor(x => Model[i].GamesWon[Model[i].SelectedGame]) /
                            @Html.DisplayFor(x => Model[i].GamesLost[Model[i].SelectedGame]) /
                            @Html.DisplayFor(x => Model[i].GamesTied[Model[i].SelectedGame])
                        </td>

                    </tr>

                }

            </tbody>
        </table>
        <br />
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        @Html.PagedListPager(Model, page => Url.Action("Search",
        new { page, currentFilter = ViewBag.CurrentFilter }))
        @*TODO - Rework Pagination to bootstrap type*@


    </div>


